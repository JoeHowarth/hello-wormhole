/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MockWormholeRelayerInterface extends utils.Interface {
  functions: {
    "chainId()": FunctionFragment;
    "forwardPayloadToEvm(uint16,address,bytes,uint256,uint256)": FunctionFragment;
    "fromWormholeFormat(bytes32)": FunctionFragment;
    "pendingDeliveries(uint256)": FunctionFragment;
    "performRecordedDeliveries()": FunctionFragment;
    "performRecordedDeliveryFiFo()": FunctionFragment;
    "quoteEVMDeliveryPrice(uint16,uint256,uint256)": FunctionFragment;
    "sendPayloadToEvm(uint16,address,bytes,uint256,uint256)": FunctionFragment;
    "sequence_()": FunctionFragment;
    "toWormholeFormat(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "chainId"
      | "forwardPayloadToEvm"
      | "fromWormholeFormat"
      | "pendingDeliveries"
      | "performRecordedDeliveries"
      | "performRecordedDeliveryFiFo"
      | "quoteEVMDeliveryPrice"
      | "sendPayloadToEvm"
      | "sequence_"
      | "toWormholeFormat"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forwardPayloadToEvm",
    values: [BigNumberish, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fromWormholeFormat",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingDeliveries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performRecordedDeliveries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performRecordedDeliveryFiFo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteEVMDeliveryPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendPayloadToEvm",
    values: [BigNumberish, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sequence_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toWormholeFormat",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forwardPayloadToEvm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fromWormholeFormat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingDeliveries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performRecordedDeliveries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performRecordedDeliveryFiFo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteEVMDeliveryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendPayloadToEvm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sequence_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toWormholeFormat",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockWormholeRelayer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockWormholeRelayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chainId(overrides?: CallOverrides): Promise<[number]>;

    forwardPayloadToEvm(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    fromWormholeFormat(
      whFormatAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pendingDeliveries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, string, string, number, string] & {
        targetChain: number;
        targetAddress: string;
        receiverValue: BigNumber;
        gasLimit: BigNumber;
        payload: string;
        sourceAddress: string;
        sourceChain: number;
        deliveryHash: string;
      }
    >;

    performRecordedDeliveries(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    performRecordedDeliveryFiFo(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    quoteEVMDeliveryPrice(
      arg0: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nativePriceQuote: BigNumber;
        targetChainRefundPerGasUnused: BigNumber;
      }
    >;

    sendPayloadToEvm(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    sequence_(overrides?: CallOverrides): Promise<[BigNumber]>;

    toWormholeFormat(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  chainId(overrides?: CallOverrides): Promise<number>;

  forwardPayloadToEvm(
    targetChain: BigNumberish,
    targetAddress: string,
    payload: BytesLike,
    receiverValue: BigNumberish,
    gasLimit: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  fromWormholeFormat(
    whFormatAddress: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  pendingDeliveries(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, BigNumber, BigNumber, string, string, number, string] & {
      targetChain: number;
      targetAddress: string;
      receiverValue: BigNumber;
      gasLimit: BigNumber;
      payload: string;
      sourceAddress: string;
      sourceChain: number;
      deliveryHash: string;
    }
  >;

  performRecordedDeliveries(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  performRecordedDeliveryFiFo(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  quoteEVMDeliveryPrice(
    arg0: BigNumberish,
    receiverValue: BigNumberish,
    gasLimit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      nativePriceQuote: BigNumber;
      targetChainRefundPerGasUnused: BigNumber;
    }
  >;

  sendPayloadToEvm(
    targetChain: BigNumberish,
    targetAddress: string,
    payload: BytesLike,
    receiverValue: BigNumberish,
    gasLimit: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  sequence_(overrides?: CallOverrides): Promise<BigNumber>;

  toWormholeFormat(addr: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    chainId(overrides?: CallOverrides): Promise<number>;

    forwardPayloadToEvm(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fromWormholeFormat(
      whFormatAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingDeliveries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, BigNumber, BigNumber, string, string, number, string] & {
        targetChain: number;
        targetAddress: string;
        receiverValue: BigNumber;
        gasLimit: BigNumber;
        payload: string;
        sourceAddress: string;
        sourceChain: number;
        deliveryHash: string;
      }
    >;

    performRecordedDeliveries(overrides?: CallOverrides): Promise<void>;

    performRecordedDeliveryFiFo(overrides?: CallOverrides): Promise<void>;

    quoteEVMDeliveryPrice(
      arg0: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        nativePriceQuote: BigNumber;
        targetChainRefundPerGasUnused: BigNumber;
      }
    >;

    sendPayloadToEvm(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sequence_(overrides?: CallOverrides): Promise<BigNumber>;

    toWormholeFormat(addr: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    forwardPayloadToEvm(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    fromWormholeFormat(
      whFormatAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingDeliveries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performRecordedDeliveries(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    performRecordedDeliveryFiFo(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    quoteEVMDeliveryPrice(
      arg0: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendPayloadToEvm(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    sequence_(overrides?: CallOverrides): Promise<BigNumber>;

    toWormholeFormat(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forwardPayloadToEvm(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fromWormholeFormat(
      whFormatAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingDeliveries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performRecordedDeliveries(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    performRecordedDeliveryFiFo(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    quoteEVMDeliveryPrice(
      arg0: BigNumberish,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendPayloadToEvm(
      targetChain: BigNumberish,
      targetAddress: string,
      payload: BytesLike,
      receiverValue: BigNumberish,
      gasLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sequence_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toWormholeFormat(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
